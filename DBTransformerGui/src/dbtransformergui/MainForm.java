package dbtransformergui;

import dbtransfromer.DBParameters;
import settingtools.XMLReader;
import settingtools.XMLWriter;
import dbtransfromer.DBTransformerImpl;
import dbtransfromer.DBTransformerImpl.DumpParameterException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.xml.stream.XMLStreamException;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * Grafic aplication which allows transform data from RDB into some type of semantic web resources.
 * In fact this is GUI above DBTransformer.
 * Using JAVA SWING libraries
 * Last Modified 18.5.2010
 * @author Vaclav Papez
 */
public class MainForm extends javax.swing.JFrame {

    private final int DB_DRIVER_ID_ORACLE = 0;
    private final int DB_DRIVER_ID_POSTGRESQL = 1;
    private final int DB_DRIVER_ID_MYSQL = 2;
    private final int DB_DRIVER_ID_MSSQL = 3;
    private final int DB_DRIVER_ID_OTHER = 4;
    private final String DB_DRIVER_ORACLE = "oracle.jdbc.OracleDriver";
    private final String DB_DRIVER_POSTGRESQL = "org.postgresql.Driver";
    private final String DB_DRIVER_MYSQL = "com.mysql.jdbc.Driver";
    private final String DB_DRIVER_MSSQL = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
    private String jdbc;
    private String username;
    private String password;
    private String driver;
    private String output;
    private String baseUri;
    private String openPath;
    private String savePath;
    private File openDirr;
    private File saveDirr;
    private int threadID;
    private boolean defaultBaseUri;
    private XMLWriter xmlwriter;
    private XMLReader xmlreader;
    private byte[] rdfByteArray;

    /**
     * Creates new form MainForm
     * @param dbtransformer instance od DBTransformer
     */
    public MainForm(DBTransformerImpl dbtransformer) {
        threadID = 0;
        initComponents();
        defaultBaseUri = defaultBaseUriCheckBox.isSelected();
        setBaseFieldVisibility(defaultBaseUri);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dbHelpFrame = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        dbHelpCloseButton = new javax.swing.JButton();
        aboutFrame = new javax.swing.JFrame();
        closeAboutButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        saveFileChooser = new javax.swing.JFileChooser();
        openFileChooser = new javax.swing.JFileChooser();
        helpFrame = new javax.swing.JFrame();
        closeHelpButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        helpTextArea = new javax.swing.JTextArea();
        dbPanel = new javax.swing.JPanel();
        dbHostLabel = new javax.swing.JLabel();
        dbParamLabel = new javax.swing.JLabel();
        dbUserLabel = new javax.swing.JLabel();
        dbPasswordLabel = new javax.swing.JLabel();
        dbUserTextField = new javax.swing.JTextField();
        dbHostTextField = new javax.swing.JTextField();
        dbPasswordPasswordField = new javax.swing.JPasswordField();
        dbDriverLabel = new javax.swing.JLabel();
        dbDriverTextField = new javax.swing.JTextField();
        dbDriverComboBox = new javax.swing.JComboBox();
        dbConnTestStatusLabel = new javax.swing.JLabel();
        dbHelpLabel = new javax.swing.JLabel();
        outputPanel = new javax.swing.JPanel();
        outputParamLabel = new javax.swing.JLabel();
        outputPathLabel = new javax.swing.JLabel();
        outputFormatLabel = new javax.swing.JLabel();
        outputPathTextField = new javax.swing.JTextField();
        outputTransformButton = new javax.swing.JButton();
        outputTransformStatusLabel = new javax.swing.JLabel();
        outputBrowseButton = new javax.swing.JButton();
        outputFormatComboBox = new javax.swing.JComboBox();
        baseUriTextField = new javax.swing.JTextField();
        baseUriLabel = new javax.swing.JLabel();
        defaultBaseUriCheckBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageTextField = new javax.swing.JTextArea();
        menuMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        dbHelpFrame.setTitle("Help");
        dbHelpFrame.setMinimumSize(new java.awt.Dimension(600, 200));

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 12));
        jTextArea1.setRows(5);
        jTextArea1.setText("MySQL: jdbc:mysql://servername/databasename\nPostgreSQL: jdbc:postgresql://servername/databasename\nOracle: jdbc:oracle:thin:@servername:1521:databasename\nMicrosoft SQL Server: jdbc:sqlserver://servername;databaseName=databasename");
        jScrollPane1.setViewportView(jTextArea1);

        dbHelpCloseButton.setText("Close");
        dbHelpCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbHelpCloseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dbHelpFrameLayout = new javax.swing.GroupLayout(dbHelpFrame.getContentPane());
        dbHelpFrame.getContentPane().setLayout(dbHelpFrameLayout);
        dbHelpFrameLayout.setHorizontalGroup(
            dbHelpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbHelpFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dbHelpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                    .addComponent(dbHelpCloseButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        dbHelpFrameLayout.setVerticalGroup(
            dbHelpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbHelpFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbHelpCloseButton)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        aboutFrame.setTitle("About Application");
        aboutFrame.setMinimumSize(new java.awt.Dimension(355, 200));

        closeAboutButton.setText("Close");
        closeAboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAboutButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RDB to RDF Transformer");

        jLabel2.setText("Author: Václav Papež");

        jLabel3.setText("Version: 1.0");

        jLabel4.setText("Licence: Open Source GNU");

        jLabel5.setText("Using: DBTransformer, Jena Framework, D2RQ Platform");

        javax.swing.GroupLayout aboutFrameLayout = new javax.swing.GroupLayout(aboutFrame.getContentPane());
        aboutFrame.getContentPane().setLayout(aboutFrameLayout);
        aboutFrameLayout.setHorizontalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(closeAboutButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
                .addContainerGap())
        );
        aboutFrameLayout.setVerticalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeAboutButton)
                .addContainerGap())
        );

        saveFileChooser.setFileFilter(new XMLFileFilter());

        openFileChooser.setDialogTitle("Open Setting File");
        openFileChooser.setFileFilter(new XMLFileFilter());

        helpFrame.setTitle("Help");
        helpFrame.setMinimumSize(new java.awt.Dimension(400, 200));

        closeHelpButton.setText("Close");
        closeHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeHelpButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setEnabled(false);

        helpTextArea.setColumns(20);
        helpTextArea.setEditable(false);
        helpTextArea.setFont(new java.awt.Font("Monospaced", 0, 12));
        helpTextArea.setRows(5);
        helpTextArea.setText("User guide is a part of documentation.");
        jScrollPane3.setViewportView(helpTextArea);

        javax.swing.GroupLayout helpFrameLayout = new javax.swing.GroupLayout(helpFrame.getContentPane());
        helpFrame.getContentPane().setLayout(helpFrameLayout);
        helpFrameLayout.setHorizontalGroup(
            helpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, helpFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(helpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(closeHelpButton))
                .addContainerGap())
        );
        helpFrameLayout.setVerticalGroup(
            helpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, helpFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(closeHelpButton)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DBTransformer");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("mainFrame"); // NOI18N
        setResizable(false);

        dbHostLabel.setText("JDBC URL:");

        dbParamLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dbParamLabel.setText("Database parameters");

        dbUserLabel.setText("User:");

        dbPasswordLabel.setText("Password:");

        dbUserTextField.setText("pborik");

        dbHostTextField.setText("jdbc:oracle:thin:@students.kiv.zcu.cz:1521:students");

        dbPasswordPasswordField.setText("pborik");

        dbDriverLabel.setText("Driver:");

        dbDriverTextField.setEnabled(false);

        dbDriverComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "oracle.jdbc.OracleDriver", "org.postgresql.Driver", "com.mysql.jdbc.Driver", "com.microsoft.sqlserver.jdbc.SQLServerDriver", "other" }));
        dbDriverComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dbDriverComboBoxItemStateChanged(evt);
            }
        });

        dbConnTestStatusLabel.setText("   ");

        dbHelpLabel.setText("<html><a href=\"\">Help</a>");
        dbHelpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dbHelpLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout dbPanelLayout = new javax.swing.GroupLayout(dbPanel);
        dbPanel.setLayout(dbPanelLayout);
        dbPanelLayout.setHorizontalGroup(
            dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dbParamLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
            .addGroup(dbPanelLayout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(dbConnTestStatusLabel)
                .addContainerGap(271, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dbPanelLayout.createSequentialGroup()
                .addContainerGap(388, Short.MAX_VALUE)
                .addComponent(dbHelpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(dbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dbPasswordLabel)
                    .addComponent(dbHostLabel)
                    .addComponent(dbUserLabel)
                    .addComponent(dbDriverLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dbDriverTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addComponent(dbHostTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addComponent(dbUserTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addComponent(dbPasswordPasswordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addComponent(dbDriverComboBox, 0, 344, Short.MAX_VALUE))
                .addContainerGap())
        );
        dbPanelLayout.setVerticalGroup(
            dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbPanelLayout.createSequentialGroup()
                .addComponent(dbParamLabel)
                .addGap(11, 11, 11)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbHostLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbHelpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbUserLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbPasswordLabel)
                    .addComponent(dbPasswordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbDriverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbDriverLabel))
                .addGap(14, 14, 14)
                .addComponent(dbDriverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbConnTestStatusLabel))
        );

        outputParamLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        outputParamLabel.setText("Output parameters");

        outputPathLabel.setText("Output path:");

        outputFormatLabel.setText("File format:");

        outputTransformButton.setText("Transform");
        outputTransformButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputTransformButtonActionPerformed(evt);
            }
        });

        outputTransformStatusLabel.setText("   ");

        outputBrowseButton.setText("Browse");
        outputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputBrowseButtonActionPerformed(evt);
            }
        });

        outputFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RDF / XML", "OWL / XML", "OWL Funkcional Syntax", "TURLTLE", "KRSS2", "Latex", "Manchester OWL Syntax" }));

        baseUriTextField.setEnabled(false);

        baseUriLabel.setText("Base URI:");

        defaultBaseUriCheckBox.setSelected(true);
        defaultBaseUriCheckBox.setText("Default");
        defaultBaseUriCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultBaseUriCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputParamLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(outputTransformStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 221, Short.MAX_VALUE)
                .addComponent(outputTransformButton)
                .addContainerGap())
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputPathLabel)
                .addContainerGap(357, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputFormatLabel)
                    .addComponent(baseUriLabel))
                .addGap(38, 38, 38)
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(baseUriTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(outputFormatComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 244, Short.MAX_VALUE)
                    .addComponent(outputPathTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputBrowseButton)
                    .addComponent(defaultBaseUriCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addComponent(outputParamLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputPathLabel)
                    .addComponent(outputPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputBrowseButton))
                .addGap(22, 22, 22)
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFormatLabel)
                    .addComponent(outputFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(baseUriTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseUriLabel)
                    .addComponent(defaultBaseUriCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputTransformStatusLabel)
                    .addComponent(outputTransformButton))
                .addContainerGap())
        );

        messageTextField.setColumns(20);
        messageTextField.setEditable(false);
        messageTextField.setRows(5);
        jScrollPane2.setViewportView(messageTextField);

        fileMenu.setText("File");

        openMenuItem.setText("Open Setting");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save Setting");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuMenuBar.add(fileMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuMenuBar.add(helpMenu);

        setJMenuBar(menuMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(dbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dbPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void outputTransformButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputTransformButtonActionPerformed
        threadID++;
        messageTextField.append(threadID + ": Process started, please wait...\n");
        Transformation doTransformation = new Transformation(Integer.toString(threadID));
        doTransformation.start();


    }//GEN-LAST:event_outputTransformButtonActionPerformed

    private void dbHelpLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dbHelpLabelMouseClicked
        dbHelpFrame.setVisible(true);
    }//GEN-LAST:event_dbHelpLabelMouseClicked

    private void dbDriverComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dbDriverComboBoxItemStateChanged
        // last item in combo box is "other", so textfield for users input is enabled
        if (dbDriverComboBox.getSelectedIndex() == dbDriverComboBox.getItemCount() - 1) {
            dbDriverTextField.setEnabled(true);
        } else {
            dbDriverTextField.setEnabled(false);
        }
    }//GEN-LAST:event_dbDriverComboBoxItemStateChanged

    private void dbHelpCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbHelpCloseButtonActionPerformed
        dbHelpFrame.setVisible(false);
    }//GEN-LAST:event_dbHelpCloseButtonActionPerformed

    private void outputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputBrowseButtonActionPerformed
        String path = "";
        JFileChooser outputFileChooser = new JFileChooser();
        outputFileChooser.showDialog(this, "Select");
        try {
            path = outputFileChooser.getSelectedFile().getAbsolutePath();
            outputPathTextField.setText(path);
        } catch (NullPointerException e) {
            messageTextField.append("");
        }
    }//GEN-LAST:event_outputBrowseButtonActionPerformed

    private void defaultBaseUriCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultBaseUriCheckBoxActionPerformed
        // set attributes if base URI isn't default
        defaultBaseUri = defaultBaseUriCheckBox.isSelected();
        setBaseFieldVisibility(defaultBaseUri);
    }//GEN-LAST:event_defaultBaseUriCheckBoxActionPerformed

    private void closeAboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAboutButtonActionPerformed
        aboutFrame.setVisible(false);
    }//GEN-LAST:event_closeAboutButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        aboutFrame.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        //Open file chooser and parse the selected setting file
        openFileChooser.setCurrentDirectory(openDirr);
        openFileChooser.showOpenDialog(this);
        try {
            openPath = openFileChooser.getSelectedFile().getAbsolutePath();
            openDirr = openFileChooser.getCurrentDirectory();
            xmlreader = new XMLReader(openPath);
            if (xmlreader.parse()) {
                dbHostTextField.setText(xmlreader.getJdbc());
                dbUserTextField.setText(xmlreader.getUser());
                outputPathTextField.setText(xmlreader.getOutputPath());
                if (xmlreader.getBaseUri() != null) {
                    baseUriTextField.setText(xmlreader.getBaseUri());
                    defaultBaseUri = false;
                    setBaseFieldVisibility(defaultBaseUri);
                    defaultBaseUriCheckBox.setSelected(false);
                }
                outputFormatComboBox.setSelectedIndex(xmlreader.getFormat());
                dbDriverComboBox.setSelectedIndex(dbDriverComboBox.getItemCount() - 1);
                dbDriverTextField.setText(xmlreader.getDriver());
                dbDriverTextField.setEnabled(true);
                messageTextField.append("Setting loaded.\n");
            }
        } catch (NullPointerException e) {
            messageTextField.append("");
        } catch (FileNotFoundException e) {
            messageTextField.append("Invalid file path.\n");
        } catch (XMLStreamException e) {
            messageTextField.append("Unsuccessful operation. Error during opening setting.\n");
        }

    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // open file chooser and save setting into selected file
        saveFileChooser.setCurrentDirectory(saveDirr);
        saveFileChooser.showSaveDialog(this);
        try {
            savePath = saveFileChooser.getSelectedFile().getAbsolutePath();
            saveDirr = saveFileChooser.getCurrentDirectory();
            if (!savePath.endsWith(".xml")) {
                savePath = savePath.concat(".xml");
            }
            xmlwriter = new XMLWriter(savePath);
            getParameters();
            xmlwriter.setUser(username);
            xmlwriter.setJdbc(jdbc);
            xmlwriter.setOutputPath(output);
            xmlwriter.setFormat(outputFormatComboBox.getSelectedIndex());
            xmlwriter.setDriver(driver);
            xmlwriter.setBaseUri(baseUri);

            if (xmlwriter.save()) {
                xmlwriter.close();
                messageTextField.append("Setting saved.\n");
            }

        } catch (FileNotFoundException ex) {
            messageTextField.append("Invalid file path.\n");
        } catch (XMLStreamException ex) {
            messageTextField.append("Unsuccessful operation. Error during saving.\n");
        } catch (NullPointerException e) {
            messageTextField.append("");
        }

    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void closeHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeHelpButtonActionPerformed
        helpFrame.setVisible(false);
    }//GEN-LAST:event_closeHelpButtonActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        helpFrame.setVisible(true);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    /**
     * Get parameters from visual components into local variables
     */
    private void getParameters() {
        username = dbUserTextField.getText();
        password = String.valueOf(dbPasswordPasswordField.getPassword());
        jdbc = dbHostTextField.getText();
        output = outputPathTextField.getText();
        if (!defaultBaseUri) {
            baseUri = baseUriTextField.getText();
        }
        switch (dbDriverComboBox.getSelectedIndex()) {
            case DB_DRIVER_ID_ORACLE:
                driver = DB_DRIVER_ORACLE;
                break;
            case DB_DRIVER_ID_POSTGRESQL:
                driver = DB_DRIVER_POSTGRESQL;
                break;
            case DB_DRIVER_ID_MYSQL:
                driver = DB_DRIVER_MYSQL;
                break;
            case DB_DRIVER_ID_MSSQL:
                driver = DB_DRIVER_MSSQL;
                break;
            case DB_DRIVER_ID_OTHER:
                driver = dbDriverTextField.getText();
                break;
            default:
                messageTextField.append("Invalid choosen Driver!\n");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame aboutFrame;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JLabel baseUriLabel;
    private javax.swing.JTextField baseUriTextField;
    private javax.swing.JButton closeAboutButton;
    private javax.swing.JButton closeHelpButton;
    private javax.swing.JLabel dbConnTestStatusLabel;
    private javax.swing.JComboBox dbDriverComboBox;
    private javax.swing.JLabel dbDriverLabel;
    private javax.swing.JTextField dbDriverTextField;
    private javax.swing.JButton dbHelpCloseButton;
    private javax.swing.JFrame dbHelpFrame;
    private javax.swing.JLabel dbHelpLabel;
    private javax.swing.JLabel dbHostLabel;
    private javax.swing.JTextField dbHostTextField;
    private javax.swing.JPanel dbPanel;
    private javax.swing.JLabel dbParamLabel;
    private javax.swing.JLabel dbPasswordLabel;
    private javax.swing.JPasswordField dbPasswordPasswordField;
    private javax.swing.JLabel dbUserLabel;
    private javax.swing.JTextField dbUserTextField;
    private javax.swing.JCheckBox defaultBaseUriCheckBox;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JFrame helpFrame;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JTextArea helpTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuBar menuMenuBar;
    private javax.swing.JTextArea messageTextField;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton outputBrowseButton;
    private javax.swing.JComboBox outputFormatComboBox;
    private javax.swing.JLabel outputFormatLabel;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JLabel outputParamLabel;
    private javax.swing.JLabel outputPathLabel;
    private javax.swing.JTextField outputPathTextField;
    private javax.swing.JButton outputTransformButton;
    private javax.swing.JLabel outputTransformStatusLabel;
    private javax.swing.JFileChooser saveFileChooser;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    /**
     * Set facilitation of base URI text field
     * @param defaultBaseUri true if is used default value, false if isn't
     */
    private void setBaseFieldVisibility(boolean defaultBaseUri) {
        baseUriTextField.setEnabled(!defaultBaseUri);
    }

    /**
     * Checking if the parameters are filled correctly
     * @return true if all necessary parameters are filled
     */
    private boolean checkParameters() {
        if (username.isEmpty()) {
            messageTextField.append("Username is empty!\n");
            return false;
        }
        if (jdbc.isEmpty()) {
            messageTextField.append("JDBC connection string is empty!\n");
            return false;
        }
        return true;
    }

    /**
     * Instance provides transformation process in separate thread
     */
    private class Transformation extends Thread {

        private String name;
        int type;

        /**
         * Creates new transformation thread
         * @param name thread name
         */
        public Transformation(String name) {
            super(name);
            this.name = name;

        }

        /**
         * Threads run process - choose selected output type, sets rest of parameters
         * and run transformation process
         */
        @Override
        public void run() {
            DBParameters dbparam = new DBParameters();
            DBTransformerImpl dbtransformer = new DBTransformerImpl();
            try {
                type = outputFormatComboBox.getSelectedIndex();
                switch (outputFormatComboBox.getSelectedIndex()) {
                    case 0:
                        type = dbtransformer.TYPE_RDFXML;
                        break;
                    case 1:
                        type = dbtransformer.TYPE_OWLXML;
                        break;
                    case 2:
                        type = dbtransformer.TYPE_OWLFUNCTIONAL;
                        break;
                    case 3:
                        type = dbtransformer.TYPE_TURTLE;
                        break;
                    case 4:
                        type = dbtransformer.TYPE_KRSS2;
                        break;
                    case 5:
                        type = dbtransformer.TYPE_LATEX;
                        break;
                    case 6:
                        type = dbtransformer.TYPE_MANCHESTER;
                        break;
                    default:
                        type = dbtransformer.TYPE_UNKNOWN;
                }
                getParameters();
                if (checkParameters()) {
                    dbparam.setUsername(username);
                    dbparam.setPassword(password);
                    dbparam.setJdbc(jdbc);
                    dbparam.setDriver(driver);
                    dbtransformer.setOutput(output);
                    if (!defaultBaseUri) {
                        dbtransformer.setBase(baseUri);
                    }
                    messageTextField.append(name + ": RDB data extract started..\n");
                    rdfByteArray = dbtransformer.transform(dbparam,baseUri);
                    messageTextField.append(name + ": RDB data extract finished, RDF model was created..\n");
                    messageTextField.append(name + ": RDF model writing into selected format..\n");
                    if(dbtransformer.convert(type, rdfByteArray)) messageTextField.append(name + ": Process Completed.\n");
                    else messageTextField.append(name + ": Error durig saving ontology!\n");
                }
            } catch (UnsupportedEncodingException ex) {
                messageTextField.append(name + ": Invalid encoding!\n");
            } catch (FileNotFoundException ex) {
                messageTextField.append(name + ": Invalid path!\n");
            } catch (OWLOntologyStorageException ex) {
                messageTextField.append(name + ": Error durig saving ontology!\n");
            } catch (OWLOntologyCreationException ex) {
                messageTextField.append(name + ": Ontology creation error!\n");
            } catch (DumpParameterException ex) {
                messageTextField.append(name + ": Transformation error!\n");
            }
        }
    }

    /**
     * Extends FileFilter. Used for filtering setting files in file chooser
     */
    private class XMLFileFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.isDirectory() || f.getName().toLowerCase().endsWith(".xml");
        }

        @Override
        public String getDescription() {
            return ".xml files";
        }
    }
}
